{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AMI": "ami-0634f6c1db394a4ee"
      },
      "us-east-2": {
        "AMI": "ami-0af5a317c779a2ec8"
      },
      "us-west-1": {
        "AMI": "ami-0342220d0532cb537"
      },
      "us-west-2": {
        "AMI": "ami-0dbacb41617a049ba"
      },
      "ca-central-1": {
        "AMI": "ami-03174f4bf72cb2a8e"
      },
      "eu-central-1": {
        "AMI": "ami-0c155bcb40f918762"
      },
      "eu-west-1": {
        "AMI": "ami-0baf659c5bb0554ca"
      },
      "eu-west-2": {
        "AMI": "ami-0ba7bc877ce3a6fe5"
      },
      "eu-west-3": {
        "AMI": "ami-010de950a99d55b98"
      },
      "eu-north-1": {
        "AMI": "ami-0a6377f5e63296dd7"
      },
      "sa-east-1": {
        "AMI": "ami-03c44e8766045680e"
      },
      "me-south-1": {
        "AMI": "ami-044bf3aaec594c8f3"
      },
      "ap-east-1": {
        "AMI": "ami-05d8bd68d394f6e6e"
      },
      "ap-south-1": {
        "AMI": "ami-071d9a94739f92fd4"
      },
      "ap-northeast-1": {
        "AMI": "ami-08745b2e520093855"
      },
      "ap-northeast-2": {
        "AMI": "ami-080001563d6d866e3"
      },
      "ap-southeast-1": {
        "AMI": "ami-0ee3919d31fc09aaf"
      },
      "ap-southeast-2": {
        "AMI": "ami-052cef2a385dd2313"
      }
    }
  },
  "Resources": {
    "ClusterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Enable RDP Access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "27350",
            "ToPort": "27613",
            "CidrIp": {
              "Ref": "ClientIPAddress"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": {
              "Ref": "ClientIPAddress"
            }
          }
        ]
      }
    },
    "ClusterSecurityGroupInternalTrafficRule": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": "ClusterSecurityGroup",
      "Properties": {
        "GroupId": {
          "Ref": "ClusterSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "1",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Ref": "ClusterSecurityGroup"
        }
      }
    },
    "HeadnodeInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "s3-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "S3Bucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "S3Bucket",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "ec2-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "VisualEditor0",
                  "Effect": "Allow",
                  "Action": "ec2:DescribeInstances",
                  "Resource": "*"
                },
                {
                  "Sid": "VisualEditor1",
                  "Effect": "Allow",
                  "Action": "ec2:DescribeInstanceTypes",
                  "Resource": "*"
                },
                {
                  "Sid": "VisualEditor2",
                  "Effect": "Allow",
                  "Action": "ec2:TerminateInstances",
                  "Resource": "*",
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceTag/aws:cloudformation:stack-id": {
                        "Ref": "AWS::StackId"
                      }
                    }
                  }
                },
                {
                  "Sid": "VisualEditor3",
                  "Effect": "Allow",
                  "Action": "cloudformation:DescribeStackResource",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "cft-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "VisualEditor0",
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStackResources",
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "HeadnodeInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "HeadnodeInstanceRole"
          }
        ]
      }
    },
    "WorkerInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "s3-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "S3Bucket",
                              "Arn"
                            ]
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "S3Bucket",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "WorkerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "WorkerInstanceRole"
          }
        ]
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "Headnode": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "HeadnodeInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "HeadnodeInstanceProfile"
        },
        "SecurityGroupIds": [
          {
            "Ref": "ClusterSecurityGroup"
          },
          {
            "Fn::If": [
              "AddSG",
              {
                "Ref": "AdditionalSecurityGroup"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "SubnetId": {
          "Fn::Select": [
            0,
            {
              "Ref": "Subnets"
            }
          ]
        },
        "KeyName": {
          "Ref": "RDPKeyName"
        },
        "ImageId": {
          "Fn::If": [
            "OverrideAmi",
            {
              "Ref": "InstanceAmiCustom"
            },
            {
              "Fn::FindInMap": [
                "RegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "AMI"
              ]
            }
          ]
        },
        "EbsOptimized": "true",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdh",
            "Ebs": {
              "VolumeSize": {
                "Ref": "DatabaseVolumeSize"
              }
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "ClusterName"
                  },
                  "-Headnode"
                ]
              ]
            }
          },
          {
            "Key": "NodeType",
            "Value": "Headnode"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "<powershell>",
                "# Copyright 2022-2023 The MathWorks, Inc.",
                "",
                "$StartupFolder = \"$Env:ProgramFiles\\MathWorks\\startup\"",
                "# Load startup variables",
                "If (Test-Path $StartupFolder\\env.ps1) {",
                "    . $StartupFolder\\env.ps1",
                "}",
                "",
                "# Define startup parameters",
                "$Env:NodeType = 'headnode'",
                {
                  "Fn::Sub": "$Env:WorkersPerNode = ${NumWorkersPerNode}"
                },
                {
                  "Fn::Sub": "$Env:EnableAutoscaling = '${EnableAutoscaling}'"
                },
                {
                  "Fn::Sub": "$Env:MaxNodes = ${MaxWorkerNodes}"
                },
                {
                  "Fn::Sub": "$Env:MLMLicenseFile = '${LicenseManager}'"
                },
                {
                  "Fn::Sub": "$Env:JobManagerName = '${ClusterName}'"
                },
                {
                  "Fn::Sub": "$Env:S3Bucket = 's3://${S3Bucket}'"
                },
                {
                  "Fn::Sub": "$Env:OptionalUserCommand='${OptionalUserCommand}'"
                },
                "",
                "# Run startup scripts",
                "Start-Transcript -Path $Env:ProgramData\\MathWorks\\startup.log -Append",
                "Get-ChildItem $StartupFolder | Where-Object { $_ -match '^[0-9]+_.+$' } | Sort-Object | ForEach-Object {",
                "    Write-Output \"startup: executing $_\"",
                "    $Start = Get-Date",
                "    & $_.FullName",
                "    Write-Output \"startup: finished after $(((Get-Date) - $Start).TotalSeconds)s\"",
                "}",
                "Stop-Transcript",
                "</powershell>",
                "<persist>true</persist>"
              ]
            ]
          }
        }
      }
    },
    "WorkerConfig": {
      "DependsOn": "Headnode",
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "SecurityGroupIds": [
            {
              "Ref": "ClusterSecurityGroup"
            },
            {
              "Fn::If": [
                "AddSG",
                {
                  "Ref": "AdditionalSecurityGroup"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "ImageId": {
            "Fn::If": [
              "OverrideAmi",
              {
                "Ref": "InstanceAmiCustom"
              },
              {
                "Fn::FindInMap": [
                  "RegionMap",
                  {
                    "Ref": "AWS::Region"
                  },
                  "AMI"
                ]
              }
            ]
          },
          "InstanceType": {
            "Ref": "WorkerInstanceType"
          },
          "IamInstanceProfile": {
            "Name": {
              "Ref": "WorkerInstanceProfile"
            }
          },
          "KeyName": {
            "Ref": "RDPKeyName"
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "\n",
                [
                  "<powershell>",
                  "# Copyright 2022-2023 The MathWorks, Inc.",
                  "",
                  "$StartupFolder = \"$Env:ProgramFiles\\MathWorks\\startup\"",
                  "# Load startup variables",
                  "If (Test-Path $StartupFolder\\env.ps1) {",
                  "    . $StartupFolder\\env.ps1",
                  "}",
                  "",
                  "# Define startup parameters",
                  "$Env:NodeType = 'worker'",
                  {
                    "Fn::Sub": "$Env:WorkersPerNode = ${NumWorkersPerNode}"
                  },
                  {
                    "Fn::Sub": "$Env:MLMLicenseFile = '${LicenseManager}'"
                  },
                  {
                    "Fn::Sub": "$Env:JobManagerName = '${ClusterName}'"
                  },
                  {
                    "Fn::Sub": "$Env:S3Bucket = 's3://${S3Bucket}'"
                  },
                  {
                    "Fn::Sub": "$Env:HeadnodeLocalIP = '${Headnode.PrivateIp}'"
                  },
                  {
                    "Fn::Sub": "$Env:HeadnodeHostname = '${Headnode.PublicDnsName}'"
                  },
                  {
                    "Fn::Sub": "$Env:OptionalUserCommand='${OptionalUserCommand}'"
                  },
                  "",
                  "# Run startup scripts",
                  "Start-Transcript -Path $Env:ProgramData\\MathWorks\\startup.log -Append",
                  "Get-ChildItem $StartupFolder | Where-Object { $_ -match '^[0-9]+_.+$' } | Sort-Object | ForEach-Object {",
                  "    Write-Output \"startup: executing $_\"",
                  "    $Start = Get-Date",
                  "    & $_.FullName",
                  "    Write-Output \"startup: finished after $(((Get-Date) - $Start).TotalSeconds)s\"",
                  "}",
                  "Stop-Transcript",
                  "</powershell>",
                  "<persist>true</persist>"
                ]
              ]
            }
          }
        }
      }
    },
    "ClusterScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "WorkerConfig"
          },
          "Version": {
            "Fn::GetAtt": [
              "WorkerConfig",
              "LatestVersionNumber"
            ]
          }
        },
        "NewInstancesProtectedFromScaleIn": {
          "Fn::If": [
            "UseScaleInProtection",
            true,
            false
          ]
        },
        "DesiredCapacity": {
          "Ref": "NumWorkerNodes"
        },
        "MinSize": {
          "Ref": "MinWorkerNodes"
        },
        "MaxSize": {
          "Ref": "MaxWorkerNodes"
        },
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "ClusterName"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "NodeType",
            "Value": "WorkerNode",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "mwWorkerIdleTimeoutMinutes",
            "Value": "10",
            "PropagateAtLaunch": "false"
          }
        ]
      }
    },
    "S3DeleteBucketsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "lambda_basic_execution",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "s3-delete-bucket",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:DeleteBucket",
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "S3Bucket",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "s3-delete-object",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "/",
                      [
                        {
                          "Fn::GetAtt": [
                            "S3Bucket",
                            "Arn"
                          ]
                        },
                        "*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "EmptyBucketsLambda": {
      "DependsOn": "S3Bucket",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "/*",
                " * Copyright 2021 The MathWorks, Inc.",
                " */",
                "",
                "'use strict';",
                "",
                "var AWS = require('aws-sdk');",
                "var s3 = new AWS.S3();",
                "",
                "exports.handler = (event, context) => {",
                "  console.log('Executing emptyBuckets lambda. Event: ' + JSON.stringify(event) + ', context: ' + JSON.stringify(context));",
                "  if (event.RequestType === 'Delete') {",
                "    var bucketName = event.ResourceProperties.BucketName;",
                "    s3.listObjectsV2({'Bucket': bucketName}, function(err, result) {",
                "      if (err) return sendResponse(event, context, 'FAILED', err);",
                "      if (result.Contents.length > 0) {",
                "        var objectList = result.Contents.map(c => ({'Key': c.Key}));",
                "        var obj = {",
                "          'Bucket': bucketName,",
                "          'Delete': {",
                "            'Objects': objectList",
                "          }",
                "        };",
                "        console.log(JSON.stringify(obj));",
                "        s3.deleteObjects(obj, function(e, data) {",
                "          if (e) return sendResponse(event, context, 'FAILED', e);",
                "          sendResponse(event, context, 'SUCCESS', {'Message': bucketName + ' emptied. ' + JSON.stringify(data)});",
                "        });",
                "      } else {",
                "          sendResponse(event, context, 'SUCCESS', {'Message': bucketName + ' already empty.'});",
                "      }",
                "    });",
                "  } else {",
                "    sendResponse(event, context, 'SUCCESS', {'Message': 'Lambda created and run successfully'});",
                "  }",
                "};",
                "",
                "// From AWS user guide at https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html",
                "function sendResponse(event, context, responseStatus, responseData) {",
                "",
                "    var responseBody = JSON.stringify({",
                "        Status: responseStatus,",
                "        Reason: 'See the details in CloudWatch Log Stream: ' + context.logStreamName,",
                "        PhysicalResourceId: context.logStreamName,",
                "        StackId: event.StackId,",
                "        RequestId: event.RequestId,",
                "        LogicalResourceId: event.LogicalResourceId,",
                "        Data: responseData",
                "    });",
                "",
                "    console.log('RESPONSE BODY:\\n', responseBody);",
                "",
                "    var https = require('https');",
                "    var url = require('url');",
                "",
                "    var parsedUrl = url.parse(event.ResponseURL);",
                "    var options = {",
                "        hostname: parsedUrl.hostname,",
                "        port: 443,",
                "        path: parsedUrl.path,",
                "        method: 'PUT',",
                "        headers: {",
                "            'content-type': '',",
                "            'content-length': responseBody.length",
                "        }",
                "    };",
                "",
                "    console.log('SENDING RESPONSE...\\n');",
                "",
                "    var request = https.request(options, function(response) {",
                "        console.log('STATUS: ' + response.statusCode);",
                "        console.log('HEADERS: ' + JSON.stringify(response.headers));",
                "        // Tell AWS Lambda that the function execution is done",
                "        context.done();",
                "    });",
                "",
                "    request.on('error', function(error) {",
                "        console.log('sendResponse Error:' + error);",
                "        // Tell AWS Lambda that the function execution is done",
                "        context.done();",
                "    });",
                "",
                "    // write data to request body",
                "    request.write(responseBody);",
                "    request.end();",
                "}"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "S3DeleteBucketsRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs16.x"
      },
      "Type": "AWS::Lambda::Function"
    },
    "EmptyBuckets": {
      "Type": "Custom::LambdaDependency",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "EmptyBucketsLambda",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "S3Bucket"
        }
      }
    },
    "HeadNodeASGPolicy": {
      "DependsOn": [
        "ClusterScalingGroup",
        "HeadnodeInstanceRole"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "asg-access-policy",
        "Roles": [
          {
            "Ref": "HeadnodeInstanceRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "VisualEditor0",
              "Effect": "Allow",
              "Action": [
                "autoscaling:SetDesiredCapacity",
                "autoscaling:SetInstanceProtection",
                "autoscaling:CreateOrUpdateTags",
                "autoscaling:UpdateAutoScalingGroup",
                "autoscaling:SetInstanceHealth"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:autoscaling:${region}:${ID}:autoScalingGroup:*:autoScalingGroupName/${name}",
                  {
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "ID": {
                      "Ref": "AWS::AccountId"
                    },
                    "name": {
                      "Ref": "ClusterScalingGroup"
                    }
                  }
                ]
              }
            },
            {
              "Sid": "VisualEditor1",
              "Effect": "Allow",
              "Action": [
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeAutoScalingGroups"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "OnStackDeleteLambda": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "HeadNodeASGPolicy",
        "StackDeleteLambdaRole"
      ],
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "# Copyright 2020-2021 The MathWorks, Inc.",
                "",
                "import boto3",
                "import cfnresponse",
                "",
                "def lambda_handler(event, context):",
                "    print(f\"Region = {event['ResourceProperties']['Region']}\")",
                "    print(f\"ASGName = {event['ResourceProperties']['ASGName']}\")",
                "    responseData = {}",
                "    if event['RequestType'] == 'Delete':",
                "        responseData['output'] = 'This was a delete event.'",
                "        asg_client = boto3.client('autoscaling', region_name=event['ResourceProperties']['Region'])",
                "        asg_response = asg_client.describe_auto_scaling_groups(AutoScalingGroupNames=[event['ResourceProperties']['ASGName']])",
                "        asgClient = boto3.client('autoscaling', region_name=event['ResourceProperties']['Region'])",
                "        for auto_scaling_group in asg_response['AutoScalingGroups']:",
                "            for instance in auto_scaling_group['Instances']:",
                "                asgClient.set_instance_protection(InstanceIds=[instance['InstanceId']], AutoScalingGroupName=event['ResourceProperties']['ASGName'], ProtectedFromScaleIn=False)",
                "                print(f'Unprotected : {instance[\"InstanceId\"]}')",
                "    else:",
                "        responseData['output'] = 'This was not a delete event.'",
                "    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")"
              ]
            ]
          }
        },
        "Handler": "index.lambda_handler",
        "Runtime": "python3.8",
        "Timeout": "60",
        "Role": {
          "Fn::GetAtt": [
            "StackDeleteLambdaRole",
            "Arn"
          ]
        }
      }
    },
    "OnStackDelete": {
      "Type": "Custom::LambdaDependency",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "OnStackDeleteLambda",
            "Arn"
          ]
        },
        "ASGName": {
          "Ref": "ClusterScalingGroup"
        },
        "Region": {
          "Ref": "AWS::Region"
        }
      }
    },
    "StackDeleteLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ec2-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "VisualEditor0",
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:SetInstanceProtection"
                  ],
                  "Resource": {
                    "Fn::Sub": [
                      "arn:aws:autoscaling:${region}:${ID}:autoScalingGroup:*:autoScalingGroupName/${name}",
                      {
                        "region": {
                          "Ref": "AWS::Region"
                        },
                        "ID": {
                          "Ref": "AWS::AccountId"
                        },
                        "name": {
                          "Ref": "ClusterScalingGroup"
                        }
                      }
                    ]
                  }
                },
                {
                  "Sid": "VisualEditor1",
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:DescribeAutoScalingGroups"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Parameters": {
    "VPC": {
      "Description": "ID of an existing VPC in which to deploy this stack",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "Must be the ID of an existing VPC.",
      "AllowedPattern": ".+"
    },
    "Subnets": {
      "Description": "List of existing subnets IDs for the head node and workers",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription": "Must be the ID of existing subnets within the chosen VPC.",
      "AllowedPattern": ".+"
    },
    "ClientIPAddress": {
      "Description": "IP address range that will be allowed to connect to this cluster from outside of the VPC. This field should be formatted as <ip_address>/<mask>. E.g. 10.0.0.1/32. This is the public IP address which can be found by searching for 'what is my ip address' on the web. The mask determines the number of IP addresses to include. A mask of 32 is a single IP address. This calculator can be used to build a specific range: https://www.ipaddressguide.com/cidr. You may need to contact your IT administrator to determine which address is appropriate.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "RDPKeyName": {
      "Description": "Name of an existing EC2 KeyPair to allow RDP access to all the instances. See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html for details on creating these.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "AllowedPattern": ".+"
    },
    "ClusterName": {
      "Description": "Name to use for this cluster. This name will be shown in MATLAB as the cluster profile name.",
      "Type": "String",
      "AllowedPattern": "[A-Za-z][A-Za-z0-9 ]+",
      "ConstraintDescription": "Must only include alphanumeric characters and spaces and cannot start with a space or number."
    },
    "HeadnodeInstanceType": {
      "Description": "AWS instance type to use for the head node, which will run the job manager. No workers will be started on this node, so this can be a smaller instance type than the worker nodes. See https://aws.amazon.com/ec2/instance-types for a list of instance types. Must be available in the Availability Zone of the first subnet in the configured list",
      "Default": "t3.medium",
      "Type": "String",
      "MinLength": 1,
      "ConstraintDescription": "The headnode instance type must be specified"
    },
    "InstanceAmiCustom": {
      "Default": "",
      "Description": "ID of a custom Amazon Machine Image (AMI) in the target region (optional). Ensure that the custom machine image is compatible with the provided CloudFormation template. The ID should start with 'ami-'.",
      "Type": "String"
    },
    "DatabaseVolumeSize": {
      "Description": "Size in GiB of the EBS volume storing the MJS database (all job and task information, including input and output data). Ensure that the volume has enough capacity to store the data.",
      "Type": "Number",
      "Default": "100",
      "MinValue": "32",
      "ConstraintDescription": "Size must be at least 32 GiB."
    },
    "WorkerInstanceType": {
      "Description": "AWS instance type to use for the workers. See https://aws.amazon.com/ec2/instance-types for a list of instance types.",
      "Default": "c5.xlarge",
      "Type": "String",
      "MinLength": 1,
      "ConstraintDescription": "The worker instance type must be specified"
    },
    "NumWorkerNodes": {
      "Description": "Number of AWS instances to start for the workers to run on.",
      "Type": "Number",
      "Default": "2",
      "MinValue": "0"
    },
    "MinWorkerNodes": {
      "Description": "Minimum number of AWS instances that can run at any time.",
      "Type": "Number",
      "Default": "0",
      "MinValue": "0"
    },
    "MaxWorkerNodes": {
      "Description": "Maximum number of AWS instances that can run at any time.",
      "Type": "Number",
      "Default": "4",
      "MinValue": "0"
    },
    "NumWorkersPerNode": {
      "Description": "Number of MATLAB workers to start on each instance. Specify 1 worker per physical core (1 worker for every 2 vCPU). For example an m4.16xlarge instance has 64 vCPUs, so can support 32 MATLAB workers. See https://aws.amazon.com/ec2/instance-types for details on vCPUs for each instance type.",
      "Type": "Number",
      "Default": "2",
      "MinValue": "0"
    },
    "LicenseManager": {
      "Description": "Optional License Manager for MATLAB, specified as a string in the form <port>@<hostname>. If not specified, use online licensing. If specified, the network license manager (NLM) must be accessible from the specified VPC and subnets. To use the private hostname of the NLM host instead of the public hostname, specify the security group of the NLM deployment in the AdditionalSecurityGroup parameter. For more information, see https://github.com/mathworks-ref-arch/license-manager-for-matlab-on-aws.",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "([0-9]+@[a-zA-Z0-9.\\-]+)?",
      "ConstraintDescription": "If specified, must be in the form <port>@<hostname>"
    },
    "AdditionalSecurityGroup": {
      "Description": "ID of an additional (optional) Security Group for the instances to be placed in. Often the License Manager for MATLAB's Security Group.",
      "Type": "String",
      "Default": ""
    },
    "EnableAutoscaling": {
      "Description": "Flag indicating whether instance autoscaling is enabled. For more information about autoscaling, refer to the Use Autoscaling section in the deployment README.",
      "Type": "String",
      "AllowedValues": [
        "Yes",
        "No"
      ],
      "Default": "No"
    },
    "OptionalUserCommand": {
      "Description": "Provide an optional inline PowerShell command to run on machine launch. For example, to set an environment variable CLOUD=AWS, use this command excluding the angle brackets: <[System.Environment]::SetEnvironmentVariable(\"CLOUD\",\"AWS\", \"Machine\");>. You can use either double quotes or two single quotes. To run an external script, use this command excluding the angle brackets: <Invoke-WebRequest \"https://www.example.com/script.ps1\" -OutFile script.ps1; .\\script.ps1>. Find the logs at '$Env:ProgramData\\MathWorks\\startup.log'.",
      "Type": "String",
      "Default": ""
    }
  },
  "Rules": {
    "SubnetsInVPC": {
      "Assertions": [
        {
          "Assert": {
            "Fn::EachMemberEquals": [
              {
                "Fn::ValueOfAll": [
                  "AWS::EC2::Subnet::Id",
                  "VpcId"
                ]
              },
              {
                "Ref": "VPC"
              }
            ]
          },
          "AssertDescription": "All subnets must exist in the VPC you have selected."
        }
      ]
    }
  },
  "Conditions": {
    "OverrideAmi": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "InstanceAmiCustom"
            },
            ""
          ]
        }
      ]
    },
    "AddSG": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "AdditionalSecurityGroup"
            },
            ""
          ]
        }
      ]
    },
    "UseScaleInProtection": {
      "Fn::Equals": [
        "Yes",
        {
          "Ref": "EnableAutoscaling"
        }
      ]
    }
  },
  "Outputs": {
    "HeadnodeInstanceId": {
      "Description": "Instance ID of the headnode",
      "Value": {
        "Ref": "Headnode"
      }
    },
    "HeadnodePublicDNS": {
      "Description": "Public DNS name of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "Headnode",
          "PublicDnsName"
        ]
      }
    },
    "HeadnodePrivateDNS": {
      "Description": "Private DNS name of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "Headnode",
          "PrivateDnsName"
        ]
      }
    },
    "S3Bucket": {
      "Value": {
        "Ref": "S3Bucket"
      },
      "Description": "The name of the S3 bucket the profile has been saved to"
    },
    "ProfileName": {
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Ref": "ClusterName"
            },
            ".mlsettings"
          ]
        ]
      },
      "Description": "The name of the profile"
    },
    "BucketURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://s3.console.aws.amazon.com/s3/buckets/",
            {
              "Ref": "S3Bucket"
            },
            "/"
          ]
        ]
      },
      "Description": "The URL of the S3 bucket in the AWS console that contains the profile"
    },
    "ASGName": {
      "Value": {
        "Ref": "ClusterScalingGroup"
      },
      "Description": "Auto Scaling Group Name"
    }
  },
  "Metadata": {
    "StackType": "MJS",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "MATLAB Job Scheduler Configuration"
          },
          "Parameters": [
            "ClusterName",
            "NumWorkerNodes",
            "MinWorkerNodes",
            "MaxWorkerNodes",
            "NumWorkersPerNode"
          ]
        },
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "HeadnodeInstanceType",
            "WorkerInstanceType",
            "DatabaseVolumeSize",
            "RDPKeyName"
          ]
        },
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "VPC",
            "Subnets",
            "ClientIPAddress",
            "AdditionalSecurityGroup"
          ]
        },
        {
          "Label": {
            "default": "License Configuration"
          },
          "Parameters": [
            "LicenseManager"
          ]
        },
        {
          "Label": {
            "default": "Instance Autoscaling"
          },
          "Parameters": [
            "EnableAutoscaling"
          ]
        },
        {
          "Label": {
            "default": "Optional User Command"
          },
          "Parameters": [
            "OptionalUserCommand"
          ]
        },
        {
          "Label": {
            "default": "Custom AMI"
          },
          "Parameters": [
            "InstanceAmiCustom"
          ]
        }
      ],
      "ParameterLabels": {
        "ClusterName": {
          "default": "Cluster name"
        },
        "NumWorkerNodes": {
          "default": "Number of worker nodes"
        },
        "MinWorkerNodes": {
          "default": "Minimum number of worker nodes"
        },
        "MaxWorkerNodes": {
          "default": "Maximum number of worker nodes"
        },
        "NumWorkersPerNode": {
          "default": "Number of workers to start on each node"
        },
        "DatabaseVolumeSize": {
          "default": "Storage size for the MJS database"
        },
        "HeadnodeInstanceType": {
          "default": "Instance type for the head node"
        },
        "WorkerInstanceType": {
          "default": "Instance type for the worker nodes"
        },
        "RDPKeyName": {
          "default": "RDP Key Pair"
        },
        "ClientIPAddress": {
          "default": "CIDR IP address range of client"
        },
        "VPC": {
          "default": "VPC to deploy this stack to"
        },
        "Subnets": {
          "default": "Subnets for the head node and worker nodes"
        },
        "LicenseManager": {
          "default": "License Manager for MATLAB connection string"
        },
        "AdditionalSecurityGroup": {
          "default": "Additional security group to place instances in"
        },
        "EnableAutoscaling": {
          "default": "Enable instance autoscaling"
        },
        "OptionalUserCommand": {
          "default": "Optional user inline command"
        },
        "InstanceAmiCustom": {
          "default": "Custom AMI ID (Optional)"
        }
      }
    }
  }
}